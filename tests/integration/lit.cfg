import os
import subprocess

import lit.formats

def cat_available():
    # All non-Windows environments are assumed to have cat.
    if not lit_config.isWindows:
      return True

    shell = os.environ.get('SHELL', '')
    print("Shell: {}".format(shell))

    # Special case of GitHub Actions Windows machines: we are on Windows but Lit
    # still runs in Bash.
    is_github_actions = len(os.environ.get('GITHUB_ACTIONS', '')) > 0
    if is_github_actions:
        print("cat_available(): GitHub actions case")
        process = subprocess.Popen(['which', 'cat'],
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        which_out, _ = process.communicate()
        cat_exists = len(which_out) > 0

        print("cat exists: {}".format(cat_exists))
        return cat_exists

    # Windows Git Bash shell has cat.
    if "bash.exe" in shell:
        return True

    # PowerShell does not have cat.
    # https://stackoverflow.com/a/55598796/598057
    is_powershell = len(os.getenv('PSModulePath', '').split(os.pathsep)) >= 3
    if is_powershell:
        return False

    # These PROGRAMFILES and WINDIR seem to be very Windows-specific.
    isWindowsShell = len(os.getenv('PROGRAMFILES', '')) > 0 and len(os.getenv('WINDIR', '')) > 0
    if isWindowsShell:
        return False

    return False

config.name = "FileCheck.py integration tests"
config.test_format = lit.formats.ShTest("0")

current_dir = os.getcwd()

# LLVM LIT: Is it possible to pass user defined parameter into a test script?
# https://stackoverflow.com/a/39861848/598057
filecheck_exec = lit_config.params['FILECHECK_EXEC']
assert(filecheck_exec)

filecheck_tester_exec = lit_config.params['FILECHECK_TESTER_EXEC']
assert(filecheck_tester_exec)

real_only = lit_config.params['REAL_ONLY']

config.substitutions.append(('%FILECHECK_EXEC', filecheck_exec))
config.substitutions.append(('%FILECHECK_TESTER_EXEC', filecheck_tester_exec))

cat_exec = "cat" if cat_available() else "type"
config.substitutions.append(('%cat', cat_exec))

config.substitutions.append(('%expect_exit', 'python \"{}/tests/integration/tools/expect_exit.py\"'.format(current_dir)))

config.suffixes = ['.itest', '.c']

config.is_windows = lit_config.isWindows
config.is_llvm_filecheck_test = real_only

