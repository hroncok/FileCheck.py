; RUN: %cat "%S/filecheck.input" | %FILECHECK_EXEC "%S/filecheck.check" | %FILECHECK_TESTER_EXEC "%s" --match-full-lines -check-prefix=NO_OPTION
; RUN: %cat "%S/filecheck.input" | (%FILECHECK_EXEC "%S/filecheck.check" --match-full-lines 2>&1; test $? = 1) | %FILECHECK_TESTER_EXEC "%s" --match-full-lines --strict-whitespace -check-prefix=OPTION

; NO_OPTION: {{^.*}}FileCheck{{(\.py)?$}}
; NO_OPTION-EMPTY:

; OPTION:{{^.*}}FileCheck{{(\.py)?$}}
; OPTION:{{^.*}}filecheck.check:1:10: error: CHECK: expected string not found in input{{$}}
; OPTION:; CHECK: hello world
; OPTION:         ^
; OPTION:{{^<stdin>:.*:.*: note: scanning from here$}}
; OPTION:{{^hello world hello world}}
; TODO: FileCheck C++ puts caret below 'd' while I assume the correct behavior
; TODO: is to put it between d and h. Matching both behaviors below:
; OPTION:{{^          ( )?\^?$}}
; OPTION-EMPTY:
